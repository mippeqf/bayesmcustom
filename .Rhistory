install.packages(Rcpp)
install.packages("Rcpp")
install.packages("RcppArmadillo")
install.packages("knitr")
library("Rcpp")
library(RcppArmadillo)
(.packages())
getwd()
setwd("..")
install.packages("~/bayesmcustom_3.1-5.zip", repos = NULL, type = "win.binary")
library(bayesmcustom)
getwd()
setwd("./bayesmcustom/")
getwd()
install.packages("~/bayesmcustom_3.1-5.zip", repos = NULL, type = "win.binary")
library(bayesmcustom)
.libPaths()
remove.packages("bayesmcustom")
getwd()
Rcpp::compileAttributes()
emptyenv()
emptyenv("")
emptyenv()
environment()
remove.packages(bayesmcustom)
remove.packages("bayesmcustom")
(.packages())
install.packages("~/bayesmcustom_3.1-5.zip", repos = NULL, type = "win.binary")
library(bayesmcustom)
if (!require("pacman")) install.packages("pacman")
pacman::p_load("bayesmcustom", "Rcpp")
rm(list = ls(all = TRUE))
# sourceCpp("rmnpGibbs_rcpp_loop.cpp")
set.seed(234324)
# number of consumers (roughly matches real data) & products
n = consumer_num = 120000
p = product_num = 2
R = 10000000
burnin = trunc(0.1 * R)
nprint = R / 1000
nprint = 1000
# nchains = 2
size_Z = 4
inclChar = 0
coeff_noise = 1
cat(
"\n\n\n",
"Estimated time:",
n * p ^ 2 * R / 20000000,
"seconds or",
n * p ^ 2 * R / 20000000 / 60,
"minutes\n\n\n"
)
# characteristics that drive consideration: 4 binary characteristics, 2
# switched on for every of the 10 products
random_Z = matrix(runif(product_num * size_Z), nrow = product_num, ncol =
size_Z)       # set of binary char (generates J by size_Z values)
char_Z = random_Z > median(random_Z, 2)
## HERE'S HE SCALING FOR DIAG = 1!!
# char-pref draws (scaling leads to variances=1 b/c every product has two
# characteristics ==1)
k = consumer_num * size_Z
gamma_Z = matrix(rnorm(k,0,coeff_noise), nrow = consumer_num, ncol =
size_Z) * (0.5) ^ 0.5 # (1/(1+size_Z))^0.5
gamma_intercept = -0.8
# v-function with product-specific variances
v_func = gamma_Z %*% t(char_Z) + matrix(rep(gamma_intercept, consumer_num *
product_num), ncol = product_num)
# check that diagonals are equal to one!
truecov = cov(v_func)
truecov
diag(truecov)
truecovvec = matrix(truecov, ncol = p ^ 2)
truecorrvec = t(apply(truecovvec, 1, nmat))
truecorr = matrix(truecorrvec, ncol=p)
# CONSIDERATION SET: determine which products are actually searched
cset = as.numeric(v_func > 0)
# some basic descriptive stats
cset_size = sum(cset, 2)
mean(cset_size) # Supposed to be 2, 2.1047 is close enough
# Data setup
X = matrix(rep(1, n), ncol = 1) %x% cbind(diag(p), char_Z[,0:inclChar])
y = matrix(cset, ncol = 1)
Data = list(X = X,
y = matrix(cset, ncol = 1),
p = p)
nu = (p - 1) + 3
Prior = list(
betabar = matrix(rep(0, p + inclChar)),
A = 0.01 * diag(p + inclChar),
nu = nu,
V = nu * diag(p)
)
Mcmc = list(
R = R,
keep = 1,
nprint = nprint,
beta0 = matrix(rep(0, p + inclChar)),
sigma0 = nu * diag(p)
)
# Estimation
start = Sys.time()
out = rmvpGibbs(Data, Prior, Mcmc)
install.packages("~/bayesmcustom_3.1-5.zip", repos = NULL, type = "win.binary")
rmvpGibbs()
library(bayesmcustom)
rmvpGibbs()
bayesmcustom::nmat
